<?php

namespace JCSGYK\AdminBundle\Entity;

use Doctrine\ORM\Mapping as ORM;
use Symfony\Component\Validator\Mapping\ClassMetadata;
use Symfony\Component\Validator\Constraints as Assert;


/**
 * Catering
 *
 * @ORM\Table(name="catering")
 * @ORM\Entity
 */
class Catering
{
    const ACTIVE = 1;
    const PAUSED = -1;
    const CLOSED = 0;

    /**
     * @var integer
     *
     * @ORM\Column(name="id", type="integer", nullable=false)
     * @ORM\Id
     * @ORM\GeneratedValue(strategy="IDENTITY")
     */
    private $id;

    /**
     * @ORM\OneToOne(targetEntity="Client", inversedBy="catering")
     * @ORM\JoinColumn(name="client_id", referencedColumnName="id")
     */
    private $client;

    /**
     * @var Club
     *
     * @ORM\ManyToOne(targetEntity="Club", inversedBy="clientcaterings")
     * @ORM\JoinColumn(name="club_id", referencedColumnName="id")
     */
    private $club;

    /**
     * @var string
     *
     * @ORM\Column(name="subscriptions", type="text", nullable=true)
     */
    private $subscriptions;

    /**
     * @var integer
     *
     * @ORM\Column(name="menu", type="smallint", nullable=true)
     */
    private $menu;

    /**
     * @var boolean
     *
     * @ORM\Column(name="is_single", type="boolean", nullable=true)
     */
    private $isSingle;

    /**
     * @var integer
     *
     * @ORM\Column(name="income", type="integer", nullable=true)
     */
    private $income;

    /**
     * @var integer
     *
     * @ORM\Column(name="discount", type="integer", nullable=true)
     */
    private $discount;

    /**
     * @var \DateTime
     *
     * @ORM\Column(name="discount_from", type="date", nullable=true)
     */
    private $discountFrom;

    /**
     * @var \DateTime
     *
     * @ORM\Column(name="discount_to", type="date", nullable=true)
     */
    private $discountTo;

    /**
     * @var integer
     *
     * @ORM\Column(name="balance", type="integer", nullable=true)
     */
    private $balance;

    /**
     * @var integer
     *
     * @ORM\Column(name="status", type="integer", nullable=true)
     */
    private $status;

    /**
     * @var \DateTime
     *
     * @ORM\Column(name="agreement_from", type="date", nullable=true)
     */
    private $agreementFrom;

    /**
     * @var \DateTime
     *
     * @ORM\Column(name="agreement_to", type="date", nullable=true)
     */
    private $agreementTo;

    /**
     * @var \DateTime
     *
     * @ORM\Column(name="paused_from", type="date", nullable=true)
     */
    private $pausedFrom;

    /**
     * @var \DateTime
     *
     * @ORM\Column(name="paused_to", type="date", nullable=true)
     */
    private $pausedTo;

    public static function loadValidatorMetadata(ClassMetadata $metadata)
    {
        $date = new \DateTime('today');
        if (date('H') >= 10) {
            $date->modify('+1Day');
        }
        $metadata->addPropertyConstraint('agreementTo', new Assert\GreaterThan(array('value' => $date)));
        $metadata->addPropertyConstraint('pausedFrom', new Assert\GreaterThan(array('value' => $date)));
        $metadata->addPropertyConstraint('pausedTo', new Assert\GreaterThan(array('value' => $date)));
    }

    /**
     * Get the list of fields for change tracking
     * @return array of field names
     */
    public function getHistoryFields()
    {
        return ['club', 'subscriptions', 'menu', 'isSingle', 'income', 'discount', 'discountFrom', 'discountTo', 'status', 'agreementFrom', 'agreementTo', 'pausedFrom', 'pausedTo'];
    }

    /**
     * Returns the required information for the entity history
     * Usage: $this->container->get('jcs.ds')->getinfo($entity);
     * @return array
     */
    public function getHistoryInfo()
    {
        return [
            'default' => [
                'hash' => 'Client',
                'id'   => $this->client->getId(),
                'data' => null
            ],

            // the final hash will be generated by the DataStore::getHistoryInfo() function
        ];
    }

    /**
     * Normalize the date parameter
     * @param mixed $date
     * @return \DateTime
     */
    private function fixDate($date)
    {
        if (empty($date)) {
            $date = new \DateTime('today');
        } elseif (!$date instanceof \DateTime) {
            $date = new \DateTime($date);
        }

        return $date;
    }

    /**
     * Is this catering active?
     * @param mixed $date
     * @return boolean
     */
    public function isActive($date = null)
    {
        return $this->getStatus($date) == self::ACTIVE ? true : false;
    }

    /**
     * Do we have an agreement?
     * @param mixed $date
     * @return boolean
     */
    public function hasAgreement($date = null)
    {
        return $this->getStatus($date) != self::CLOSED ? true : false;
    }

    /**
     * Get status
     * @param mixed $date
     * @return integer
     */
    public function getStatus($date = null)
    {
        $date = $this->fixDate($date);

        // check for agreement
        if ((empty($this->getAgreementFrom()) || $date < $this->getAgreementFrom()) || (!empty($this->getAgreementTo()) && $date > $this->getAgreementTo())) {
            return self::CLOSED;
        }

        // check for pause
        if ((!empty($this->getPausedFrom()) && $date >= $this->getPausedFrom()) && (empty($this->getPausedTo()) || $date <= $this->getPausedTo())) {
            return self::PAUSED;
        }

        return self::ACTIVE;
    }

    /**
     * Get id
     *
     * @return integer
     */
    public function getId()
    {
        return $this->id;
    }

    /**
     * Set clubId
     *
     * @param integer $clubId
     *
     * @return Catering
     */
    public function setClubId($clubId)
    {
        $this->clubId = $clubId;

        return $this;
    }

    /**
     * Get clubId
     *
     * @return integer
     */
    public function getClubId()
    {
        return $this->clubId;
    }

    /**
     * Set subscriptions
     *
     * @param string $subscriptions
     *
     * @return Catering
     */
    public function setSubscriptions($subscriptions)
    {
        $this->subscriptions = json_encode($subscriptions);

        return $this;
    }

    /**
     * Get subscriptions
     *
     * @return string
     */
    public function getSubscriptions()
    {
        return json_decode($this->subscriptions, true);
    }

    /**
     * Set menu
     *
     * @param integer $menu
     *
     * @return Catering
     */
    public function setMenu($menu)
    {
        $this->menu = $menu;

        return $this;
    }

    /**
     * Get menu
     *
     * @return integer
     */
    public function getMenu()
    {
        return $this->menu;
    }

    /**
     * Set isSingle
     *
     * @param boolean $isSingle
     *
     * @return Catering
     */
    public function setIsSingle($isSingle)
    {
        $this->isSingle = $isSingle;

        return $this;
    }

    /**
     * Get isSingle
     *
     * @return boolean
     */
    public function getIsSingle()
    {
        return $this->isSingle;
    }

    /**
     * Set income
     *
     * @param integer $income
     *
     * @return Catering
     */
    public function setIncome($income)
    {
        $this->income = $income;

        return $this;
    }

    /**
     * Get income
     *
     * @return integer
     */
    public function getIncome()
    {
        return $this->income;
    }

    /**
     * Set discount
     *
     * @param integer $discount
     *
     * @return Catering
     */
    public function setDiscount($discount)
    {
        $this->discount = $discount;

        return $this;
    }

    /**
     * Get discount
     *
     * @return integer
     */
    public function getDiscount()
    {
        return $this->discount;
    }

    /**
     * Set client
     *
     * @param \JCSGYK\AdminBundle\Entity\Client $client
     *
     * @return Catering
     */
    public function setClient(\JCSGYK\AdminBundle\Entity\Client $client = null)
    {
        $this->client = $client;

        return $this;
    }

    /**
     * Get client
     *
     * @return \JCSGYK\AdminBundle\Entity\Client
     */
    public function getClient()
    {
        return $this->client;
    }

    /**
     * Set club
     *
     * @param \JCSGYK\AdminBundle\Entity\Club $club
     *
     * @return Catering
     */
    public function setClub(\JCSGYK\AdminBundle\Entity\Club $club = null)
    {
        $this->club = $club;

        return $this;
    }

    /**
     * Get club
     *
     * @return \JCSGYK\AdminBundle\Entity\Club
     */
    public function getClub()
    {
        return $this->club;
    }

    /**
     * Set balance
     *
     * @param integer $balance
     *
     * @return Catering
     */
    public function setBalance($balance)
    {
        $this->balance = $balance;

        return $this;
    }

    /**
     * Get balance
     *
     * @return integer
     */
    public function getBalance()
    {
        return $this->balance;
    }

    /**
     * Set discountFrom
     *
     * @param \DateTime $discountFrom
     *
     * @return Catering
     */
    public function setDiscountFrom($discountFrom)
    {
        $this->discountFrom = $discountFrom;

        return $this;
    }

    /**
     * Get discountFrom
     *
     * @return \DateTime
     */
    public function getDiscountFrom()
    {
        return $this->discountFrom;
    }

    /**
     * Set discountTo
     *
     * @param \DateTime $discountTo
     *
     * @return Catering
     */
    public function setDiscountTo($discountTo)
    {
        $this->discountTo = $discountTo;

        return $this;
    }

    /**
     * Get discountTo
     *
     * @return \DateTime
     */
    public function getDiscountTo()
    {
        return $this->discountTo;
    }

    public function discountIsActive($date = null)
    {
        if (is_null($date)) {
            $date = new \DateTime('today');
        }

        return !empty($this->getDiscount()) && $this->getDiscountFrom() <= $date && $this->getDiscountTo() >= $date;
    }

    /**
     * Set pausedFrom
     *
     * @param \DateTime $pausedFrom
     *
     * @return Catering
     */
    public function setPausedFrom($pausedFrom)
    {
        $this->pausedFrom = $pausedFrom;

        return $this;
    }

    /**
     * Get pausedFrom
     *
     * @return \DateTime
     */
    public function getPausedFrom()
    {
        return $this->pausedFrom;
    }

    /**
     * Set pausedTo
     *
     * @param \DateTime $pausedTo
     *
     * @return Catering
     */
    public function setPausedTo($pausedTo)
    {
        $this->pausedTo = $pausedTo;

        return $this;
    }

    /**
     * Get pausedTo
     *
     * @return \DateTime
     */
    public function getPausedTo()
    {
        return $this->pausedTo;
    }

    /**
     * Set agreementFrom
     *
     * @param \DateTime $agreementFrom
     *
     * @return Catering
     */
    public function setAgreementFrom($agreementFrom)
    {
        $this->agreementFrom = $agreementFrom;

        return $this;
    }

    /**
     * Get agreementFrom
     *
     * @return \DateTime
     */
    public function getAgreementFrom()
    {
        return $this->agreementFrom;
    }

    /**
     * Set agreementTo
     *
     * @param \DateTime $agreementTo
     *
     * @return Catering
     */
    public function setAgreementTo($agreementTo)
    {
        $this->agreementTo = $agreementTo;

        return $this;
    }

    /**
     * Get agreementTo
     *
     * @return \DateTime
     */
    public function getAgreementTo()
    {
        return $this->agreementTo;
    }
}
